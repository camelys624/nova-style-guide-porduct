{"version":3,"file":"component---src-pages-blog-page-tsx-6c628ecc27a01ed01733.js","mappings":"+KAOe,SAASA,EAAeC,GACrC,OAAQC,EAAAA,cAAAA,EAAAA,SAAAA,KACNA,EAAAA,cAACC,EAAAA,KAAD,CAAMC,UCRQ,4BDQ6BC,GAAI,IAAMJ,EAAMK,MACzDJ,EAAAA,cAAAA,KAAAA,KAAKD,EAAMM,SEJF,SAASC,EAASP,GAC/B,OAAQC,EAAAA,cAAAA,EAAAA,SAAAA,KACNA,EAAAA,cAAAA,KAAAA,CAAIE,UCNqB,yCDMsBH,EAAMM,OACrDL,EAAAA,cAAAA,MAAAA,CAAKE,UCRsB,2CDSxBH,EAAMQ,KAAKC,KAAI,SAACC,EAAkBC,GAAnB,OAAqCV,EAAAA,cAACF,EAAD,CAAgBO,MAAOI,EAAKJ,MAAOD,KAAMK,EAAKL,KAAMO,IAAKD,S,wBEQpH,EAbqB,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAKzB,OAJAC,EAAAA,EAAAA,YAAU,YACNC,EAAAA,EAAAA,QAGGf,EAAAA,cAACgB,EAAAA,EAAD,KACJJ,EAAKJ,KAAI,SAACC,EAAmBC,GAC5B,OAAOV,EAAAA,cAACM,EAAD,CAAUD,MAAOI,EAAKJ,MAAOE,KAAME,EAAKF,KAAMI,IAAKD,OAE3DG,K,8DCTDI,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,KA8BE,OA9BFA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACFC,OAAAA,WACI,IAAIC,EAAwB,GACxBC,EAAe,GA2BnB,OAnBiBC,KAAKtB,MAAMa,KAArBU,OACAC,MAAMC,SAAQ,SAACf,GAClB,IAAIgB,EAAehB,EAAKiB,YAAYD,KAChCE,EAAyB,CACzBtB,MAAOI,EAAKiB,YAAYrB,MACxBD,KAAMK,EAAKL,MAGVgB,EAAQK,GAOTL,EAAQK,GAAMlB,KAAKqB,KAAKD,IANxBP,EAAQK,GAAQ,CACZpB,MAAOoB,EACPlB,KAAM,CAACoB,IAEXR,EAAOS,KAAKR,EAAQK,QAMrBzB,EAAAA,cAAC6B,EAAAA,EAAD,CAAcjB,KAAMO,KAA3B,EA9BFF,CAAiBa,EAAAA,WAmDvB","sources":["webpack://nova-style-guid/./src/components/custom-link-card/index.tsx","webpack://nova-style-guid/./src/components/custom-link-card/index.module.css","webpack://nova-style-guid/./src/components/type-card/index.tsx","webpack://nova-style-guid/./src/components/type-card/index.module.css","webpack://nova-style-guid/./src/components/template-page/index.tsx","webpack://nova-style-guid/./src/pages/blog-page.tsx"],"sourcesContent":["import React from 'react'\r\nimport {Link} from 'gatsby'\r\nimport {MdxContent} from \"../template-page\"\r\n\r\n// @ts-ignore\r\nimport * as customLinkCardStyle from './index.module.css'\r\n\r\nexport default function CustomLinkCard(props: MdxContent) {\r\n  return (<>\r\n    <Link className={customLinkCardStyle.card} to={'/' + props.slug}>\r\n      <h3>{props.title}</h3>\r\n    </Link>\r\n  </>)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport var card = \"index-module--card--FvfCF\";","import * as React from 'react'\r\nimport CustomLinkCard from \"../custom-link-card\"\r\nimport {ContentType, MdxContent} from \"../template-page\"\r\n// @ts-ignore\r\nimport * as typeCardStyle from './index.module.css'\r\n\r\nexport default function TypeCard(props: ContentType) {\r\n  return (<>\r\n    <h2 className={typeCardStyle.typeCard__title}>{props.title}</h2>\r\n    <div className={typeCardStyle.typeCard__content}>\r\n      {props.list.map((item: MdxContent, index: number) => <CustomLinkCard title={item.title} slug={item.slug} key={index} />)}\r\n    </div>\r\n  </>)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport var typeCard__content = \"index-module--type-card__content--wul88\";\nexport var typeCard__title = \"index-module--type-card__title--fwrmv\";","import React, {useEffect} from 'react'\r\nimport TypeCard from \"../type-card\"\r\nimport {initHighlight} from \"../../utils\"\r\nimport Layout from \"../Layout\"\r\n\r\nconst TemplatePage = ({data, children}: any) => {\r\n    useEffect(() => {\r\n        initHighlight()\r\n    })\r\n\r\n    return <Layout>\r\n      {data.map((item: ContentType, index: number) => {\r\n        return <TypeCard title={item.title} list={item.list} key={index} />\r\n      })}\r\n      {children}\r\n    </Layout>\r\n}\r\n\r\nexport default TemplatePage\r\n\r\nexport interface ContentType {\r\n  title: string,\r\n  list: MdxContent[]\r\n}\r\n\r\nexport interface MdxContent {\r\n  title: string,\r\n  slug: string,\r\n  body?: string\r\n}\r\n","import React, {Component} from 'react'\r\nimport {graphql} from 'gatsby'\r\nimport {MDXRenderer} from \"gatsby-plugin-mdx\"\r\nimport TemplatePage, {ContentType, MdxContent} from \"../components/template-page\"\r\n\r\nclass BlogPage extends Component<Element, any> {\r\n    render() {\r\n        let result: ContentType[] = []\r\n        let typeMap: any = {}\r\n        let readme: MdxContent = {\r\n            title: '',\r\n            slug: '',\r\n            body: ''\r\n        }\r\n\r\n        // @ts-ignore\r\n        const {allMdx} = this.props.data\r\n        allMdx.nodes.forEach((item: any) => {\r\n            let type: string = item.frontmatter.type\r\n            let formatItem: MdxContent = {\r\n                title: item.frontmatter.title,\r\n                slug: item.slug\r\n            }\r\n\r\n            if (!typeMap[type]) {\r\n                typeMap[type] = {\r\n                    title: type,\r\n                    list: [formatItem]\r\n                }\r\n                result.push(typeMap[type])\r\n            } else {\r\n                typeMap[type].list.push(formatItem)\r\n            }\r\n        })\r\n\r\n        return <TemplatePage data={result}/>\r\n    }\r\n}\r\n\r\nexport const query = graphql`\r\n    query {\r\n        allMdx(filter: {slug: {regex: \"/blog/\"}}) {\r\n            nodes {\r\n                frontmatter {\r\n                    title\r\n                    type\r\n                    date\r\n                }\r\n                id\r\n                body\r\n                slug\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default BlogPage\r\n"],"names":["CustomLinkCard","props","React","Link","className","to","slug","title","TypeCard","list","map","item","index","key","data","children","useEffect","initHighlight","Layout","BlogPage","render","result","typeMap","this","allMdx","nodes","forEach","type","frontmatter","formatItem","push","TemplatePage","Component"],"sourceRoot":""}